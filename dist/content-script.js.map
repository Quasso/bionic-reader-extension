{"version":3,"file":"content-script.js","mappings":";;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AAGA;AACA","sources":["webpack://bionic-reader-extension/./src/content-script.ts"],"sourcesContent":["let CS_LOG_PREFIX = \"[BRE: contentScript via background]\";\nlet isActive = false;\nlet isInit = false;\n\nlet originalParagraphValues: Array<string>;\nlet bionicParagraphValues: Array<string>;\n\nenum ITypesCS {\n    log,\n    action\n}\n\n/**\n *\n * Send a message to another part of the extension\n *\n * @param message [string] the message to log (if any)\n * @param type [ITypesCS] the type of event we're sending\n */\nfunction sendMessage(message: string, type?: ITypesCS) {\n    !type ? type = ITypesCS.log : console.log('Nothing to see here');\n\n    chrome.runtime.sendMessage({ message, prefix: CS_LOG_PREFIX, type }, (response) => {\n        if (response) {\n            console.log(response);\n        }\n    });\n}\n\nfunction parseBionic(paragraph: Element): string | undefined {\n    let paragraphBionic: string = '';\n\n    if (paragraph['textContent'] != null) {\n        const words = paragraph.textContent.split(\" \");\n        sendMessage('Processing paragraph...');\n        words.forEach((word: string, index: number) => {\n            let formattedWordHTML = '';\n            const mid = Math.floor(word.length / 2);\n            const bioPart = word.slice(0, mid);\n            const remainder = word.slice(mid);\n\n            formattedWordHTML = `<b>${bioPart}</b>${remainder}`;\n            paragraphBionic += ' ' + formattedWordHTML;\n            sendMessage(`Processed word ${index}...`);\n\n        });\n\n        // originalParagraphValues.push(paragraph.textContent as string);\n        // bionicParagraphValues.push(paragraphBionic as string);\n        sendMessage('Completed a paragraph!');\n        return paragraphBionic;\n    }\n}\n\nfunction toggleBionic() {\n    sendMessage('Toggling bionic...', ITypesCS.log);\n\n}\n\nfunction convertPageText(paragraphs: NodeListOf<Element>) {\n    paragraphs.forEach((paragraph: Element) => {\n        sendMessage('Handling paragraph...', ITypesCS.log);\n        parseBionic(paragraph);\n    });\n    isInit = true;\n}\n\n/**\n *\n * Auto-grab Paragraphs on a matching page\n *\n * Description: this is a rudimentary function which uses very little intelligence to grab all paragraph text\n * so that it can be parsed/formatted!\n *\n */\nfunction autoGrabParagraphs() {\n    const paragraphs: NodeListOf<Element> = document.querySelectorAll('body p');\n    sendMessage(`There are ${paragraphs.length} paragraphs to parse.`);\n    if (!isInit) {\n        convertPageText(paragraphs);\n    } else {\n        toggleBionic();\n    }\n}\n\n/**\n *\n * Initialise the content-script\n *\n * Description: embeds into the active page to perform DOM interactions, allowing us to modify article text etc\n *\n */\nfunction initContentScript() {\n    sendMessage(\"Content script initialised!\", ITypesCS.log);\n    autoGrabParagraphs();\n}\n\n\n// this will only happen on pages matching the content-scripts \"matches\" list of URLs for now\ninitContentScript();"],"names":[],"sourceRoot":""}