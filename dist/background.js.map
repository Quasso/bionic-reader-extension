{"version":3,"file":"background.js","mappings":";;AAAA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACLA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://bionic-reader-extension/webpack/bootstrap","webpack://bionic-reader-extension/webpack/runtime/make namespace object","webpack://bionic-reader-extension/./src/background.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { DELIMITERS } from './content-script';\nconst DEBUG = true;\nconst ADV_DEBUG = false;\nconst DEFAULT_LOG_PREFIX = \"[BRE: background]\";\n\nenum ITypesBG {\n    log,\n    action,\n    notify\n}\n\n/**\n *\n * Smart Log\n *\n * @description helps with logging out stuff to the console of the background worker in Chrome\n * @param message [string] the message to log\n * @param prefix [string] optional: a prefix to use instead of the default\n */\nfunction smartLog(message: string, prefix?: string, advOnly: boolean = false) {\n    if ((DEBUG && !advOnly) || (DEBUG && advOnly && ADV_DEBUG)) {\n        console.log((prefix || DEFAULT_LOG_PREFIX) + ' ' + message);\n    }\n}\n\n/**\n *\n * Send Notification\n *\n * @param message [string] the message to display in the notification\n */\nfunction sendNotification(message: string) {\n    const ts = Date.now();\n\n    smartLog(`Generating notification with '${message}' at ${ts}...`);\n\n    let notifyOptions: any = {\n        type: \"basic\",\n        title: \"Bionic Reader Extension\",\n        message,\n        iconUrl: chrome.runtime.getURL(\"assets/compiled/bio-128.png\")\n    };\n\n    smartLog(notifyOptions);\n\n    chrome.notifications.create(notifyOptions);\n}\n\n/**\n *\n * Detect once the extension has loaded and log for dev purposes\n *\n */\nchrome.runtime.onInstalled.addListener(() => {\n    smartLog('Initialised successfully.');\n    // smartLog(`Test import ${DELIMITERS.DBL_HYPHEN_A}`);\n});\n\n/**\n *\n * onClicked handler for contentScript\n *\n * Description: Listen for the user clicking the extension's icon\n */\nchrome.action.onClicked.addListener((tab) => {\n    if (tab) {\n        chrome.scripting.executeScript({\n            target: { tabId: tab.id || -1 },\n            files: ['content-script.js']\n        });\n    }\n});\n\n/**\n *\n * onMessage handler\n *\n * Description: for bi-directional communication from the contentScript once running\n */\nchrome.runtime.onMessage.addListener(\n    function (request, sender, sendResponse) {\n        if (sender.tab) {\n            smartLog(`Received message from tab with address: ${sender.tab.url}`, request.prefix, true);\n        }\n\n        switch (request.type) {\n            case ITypesBG.action:\n                // trigger a function or something\n                break;\n            case ITypesBG.log:\n                smartLog(request.message, request.prefix);\n                break;\n            case ITypesBG.notify:\n                sendNotification(request.message);\n                break;\n        }\n    }\n);"],"names":[],"sourceRoot":""}